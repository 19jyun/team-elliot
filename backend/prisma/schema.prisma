generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Academy {
  id           Int                  @id @default(autoincrement())
  name         String               @db.VarChar(100)
  phoneNumber  String               @map("phone_number") @db.VarChar(20)
  address      String
  description  String
  code         String               @unique @db.VarChar(50)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  joinRequests AcademyJoinRequest[]
  classes      Class[]
  principal    Principal?
  students     StudentAcademy[]
  teachers     Teacher[]

  @@map("academies")
}

model Principal {
  id                Int      @id @default(autoincrement())
  userId            String   @unique @db.VarChar(255)
  password          String   @db.VarChar(255)
  name              String   @db.VarChar(100)
  phoneNumber       String?  @map("phone_number") @db.VarChar(20)
  email             String?  @db.VarChar(255)
  introduction      String?
  photoUrl          String?  @map("photo_url") @db.VarChar(255)
  education         String[]
  certifications    String[]
  yearsOfExperience Int?     @map("years_of_experience")
  academyId         Int      @unique @map("academy_id")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  accountHolder     String?  @map("account_holder") @db.VarChar(50)
  accountNumber     String?  @map("account_number") @db.VarChar(20)
  bankName          String?  @map("bank_name") @db.VarChar(50)
  academy           Academy  @relation(fields: [academyId], references: [id], onDelete: Cascade)

  @@map("principals")
}

model StudentAcademy {
  id        Int      @id @default(autoincrement())
  studentId Int      @map("student_id")
  academyId Int      @map("academy_id")
  joinedAt  DateTime @default(now())
  academy   Academy  @relation(fields: [academyId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, academyId])
  @@map("student_academies")
}

model User {
  id               Int               @id @default(autoincrement())
  userId           String            @unique
  password         String
  name             String
  role             Role
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  notices          Notice[]
  processedRefunds RefundRequest[]   @relation("RefundProcessor")
  rejectionDetails RejectionDetail[]

  @@map("users")
}

model Student {
  id                 Int                 @id @default(autoincrement())
  userId             String              @unique @db.VarChar(255)
  password           String              @db.VarChar(255)
  name               String              @db.VarChar(100)
  phoneNumber        String?             @map("phone_number") @db.VarChar(20)
  emergencyContact   String?             @map("emergency_contact") @db.VarChar(20)
  birthDate          DateTime?           @map("birth_date")
  notes              String?
  level              String?             @db.VarChar(50)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  attendances        Attendance[]
  enrollments        Enrollment[]
  payments           Payment[]
  refundRequests     RefundRequest[]
  sessionEnrollments SessionEnrollment[]
  academies          StudentAcademy[]

  @@map("students")
}

model Teacher {
  id                Int                      @id @default(autoincrement())
  userId            String                   @unique @db.VarChar(255)
  password          String                   @db.VarChar(255)
  name              String                   @db.VarChar(100)
  phoneNumber       String?                  @map("phone_number") @db.VarChar(20)
  introduction      String?
  photoUrl          String?                  @map("photo_url") @db.VarChar(255)
  education         String[]
  specialties       String[]
  certifications    String[]
  yearsOfExperience Int?                     @map("years_of_experience")
  availableTimes    Json?                    @map("available_times")
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  academyId         Int?                     @map("academy_id")
  creationRequests  AcademyCreationRequest[]
  joinRequests      AcademyJoinRequest[]
  classDetails      ClassDetail[]
  classes           Class[]
  academy           Academy?                 @relation(fields: [academyId], references: [id])

  @@map("teachers")
}

model Class {
  id              Int            @id @default(autoincrement())
  className       String         @map("class_name") @db.VarChar(100)
  classCode       String         @unique @map("class_code") @db.VarChar(50)
  description     String?
  maxStudents     Int            @map("max_students")
  tuitionFee      Decimal        @map("tuition_fee") @db.Decimal(10, 2)
  teacherId       Int            @map("teacher_id")
  dayOfWeek       String         @map("day_of_week") @db.VarChar(10)
  level           String         @db.VarChar(50)
  status          String         @default("DRAFT")
  startDate       DateTime       @map("start_date")
  endDate         DateTime       @map("end_date")
  classDetailId   Int?           @map("class_detail_id")
  backgroundColor String?        @map("background_color") @db.VarChar(50)
  startTime       DateTime       @map("start_time") @db.Time(6)
  endTime         DateTime       @map("end_time") @db.Time(6)
  academyId       Int            @map("academy_id")
  attendances     Attendance[]
  classSessions   ClassSession[]
  academy         Academy        @relation(fields: [academyId], references: [id])
  classDetail     ClassDetail?   @relation(fields: [classDetailId], references: [id])
  teacher         Teacher        @relation(fields: [teacherId], references: [id])
  enrollments     Enrollment[]
  notices         Notice[]

  @@map("classes")
}

model ClassDetail {
  id            Int      @id @default(autoincrement())
  description   String
  teacherId     Int      @map("teacher_id")
  locationName  String   @map("location_name")
  mapImageUrl   String   @map("map_image_url")
  requiredItems String[] @map("required_items")
  curriculum    String[]
  teacher       Teacher  @relation(fields: [teacherId], references: [id])
  classes       Class[]

  @@map("class_details")
}

model Enrollment {
  id          Int          @id @default(autoincrement())
  studentId   Int          @map("student_id")
  classId     Int          @map("class_id")
  status      String       @default("PENDING")
  cancelledAt DateTime?
  enrolledAt  DateTime     @default(now())
  attendances Attendance[]
  class       Class        @relation(fields: [classId], references: [id])
  student     Student      @relation(fields: [studentId], references: [id])
  payments    Payment[]

  @@unique([classId, studentId])
  @@map("enrollments")
}

model Attendance {
  id           Int        @id @default(autoincrement())
  enrollmentId Int        @map("enrollment_id")
  classId      Int        @map("class_id")
  studentId    Int        @map("student_id")
  date         DateTime
  status       String
  note         String?
  class        Class      @relation(fields: [classId], references: [id])
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  student      Student    @relation(fields: [studentId], references: [id])

  @@map("attendances")
}

model Payment {
  id                  Int               @id @default(autoincrement())
  studentId           Int               @map("student_id")
  amount              Decimal           @db.Decimal(10, 2)
  status              String
  method              String
  paidAt              DateTime?
  enrollmentId        Int?
  sessionEnrollmentId Int               @unique @map("session_enrollment_id")
  enrollment          Enrollment?       @relation(fields: [enrollmentId], references: [id])
  sessionEnrollment   SessionEnrollment @relation(fields: [sessionEnrollmentId], references: [id])
  student             Student           @relation(fields: [studentId], references: [id])

  @@map("payments")
}

model Notice {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  authorId    Int      @map("author_id")
  classId     Int?     @map("class_id")
  isImportant Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  class       Class?   @relation(fields: [classId], references: [id])

  @@map("notices")
}

model WithdrawalHistory {
  id             Int      @id @default(autoincrement())
  userId         String
  userName       String
  userRole       String
  reason         String
  reasonCategory String
  withdrawalDate DateTime @default(now())
  createdAt      DateTime @default(now())

  @@map("withdrawal_histories")
}

model ClassSession {
  id              Int                 @id @default(autoincrement())
  classId         Int                 @map("class_id")
  date            DateTime            @map("session_date")
  startTime       DateTime            @map("start_time")
  endTime         DateTime            @map("end_time")
  currentStudents Int                 @default(0) @map("current_students")
  maxStudents     Int                 @map("max_students")
  class           Class               @relation(fields: [classId], references: [id])
  contents        SessionContent[]
  enrollments     SessionEnrollment[]

  @@unique([classId, date])
  @@map("class_sessions")
}

model SessionEnrollment {
  id                              Int             @id @default(autoincrement())
  studentId                       Int             @map("student_id")
  sessionId                       Int             @map("session_id")
  status                          String          @default("PENDING")
  enrolledAt                      DateTime        @default(now())
  cancelledAt                     DateTime?
  rejectedAt                      DateTime?       @map("rejected_at")
  hasContributedToCurrentStudents Boolean         @default(false) @map("has_contributed_to_current_students")
  payment                         Payment?
  refundRequests                  RefundRequest[]
  session                         ClassSession    @relation(fields: [sessionId], references: [id])
  student                         Student         @relation(fields: [studentId], references: [id])

  @@unique([studentId, sessionId])
  @@map("session_enrollments")
}

model RefundRequest {
  id                  Int               @id @default(autoincrement())
  sessionEnrollmentId Int               @map("session_enrollment_id")
  studentId           Int               @map("student_id")
  reason              String
  detailedReason      String?           @map("detailed_reason")
  refundAmount        Decimal           @map("refund_amount") @db.Decimal(10, 2)
  status              String            @default("PENDING")
  processReason       String?           @map("process_reason")
  actualRefundAmount  Decimal?          @map("actual_refund_amount") @db.Decimal(10, 2)
  processedBy         Int?              @map("processed_by")
  processedAt         DateTime?         @map("processed_at")
  requestedAt         DateTime          @default(now()) @map("requested_at")
  cancelledAt         DateTime?         @map("cancelled_at")
  accountHolder       String?           @map("account_holder") @db.VarChar(50)
  accountNumber       String?           @map("account_number") @db.VarChar(20)
  bankName            String?           @map("bank_name") @db.VarChar(50)
  processor           User?             @relation("RefundProcessor", fields: [processedBy], references: [id])
  sessionEnrollment   SessionEnrollment @relation(fields: [sessionEnrollmentId], references: [id])
  student             Student           @relation(fields: [studentId], references: [id])

  @@map("refund_requests")
}

model RejectionDetail {
  id             Int           @id @default(autoincrement())
  rejectionType  RejectionType @map("rejection_type")
  entityId       Int           @map("entity_id")
  entityType     String        @map("entity_type")
  reason         String
  detailedReason String?       @map("detailed_reason")
  rejectedBy     Int           @map("rejected_by")
  rejectedAt     DateTime      @default(now()) @map("rejected_at")
  rejector       User          @relation(fields: [rejectedBy], references: [id])

  @@index([rejectionType, entityId])
  @@index([rejectedBy, rejectedAt])
  @@index([entityType, entityId])
  @@map("rejection_details")
}

model AcademyJoinRequest {
  id        Int                  @id @default(autoincrement())
  teacherId Int                  @map("teacher_id")
  academyId Int                  @map("academy_id")
  status    AcademyRequestStatus @default(PENDING)
  message   String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  academy   Academy              @relation(fields: [academyId], references: [id], onDelete: Cascade)
  teacher   Teacher              @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, academyId])
  @@index([academyId, status])
  @@index([teacherId, status])
  @@map("academy_join_requests")
}

model AcademyCreationRequest {
  id          Int                  @id @default(autoincrement())
  teacherId   Int                  @map("teacher_id")
  name        String               @db.VarChar(100)
  phoneNumber String               @map("phone_number") @db.VarChar(20)
  address     String
  description String
  status      AcademyRequestStatus @default(PENDING)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  teacher     Teacher              @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId, status])
  @@index([status, createdAt])
  @@map("academy_creation_requests")
}

model BalletPose {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar(100)
  imageUrl        String?          @map("image_url") @db.VarChar(255)
  description     String
  difficulty      PoseDifficulty   @default(BEGINNER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  sessionContents SessionContent[]

  @@map("ballet_poses")
}

model SessionContent {
  id        Int          @id @default(autoincrement())
  sessionId Int          @map("session_id")
  poseId    Int          @map("pose_id")
  order     Int          @default(0)
  notes     String?
  createdAt DateTime     @default(now())
  pose      BalletPose   @relation(fields: [poseId], references: [id])
  session   ClassSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, poseId, order])
  @@map("session_contents")
}

enum Role {
  TEACHER
  STUDENT
  PRINCIPAL
}

enum RejectionType {
  ENROLLMENT_REJECTION
  REFUND_REJECTION
  SESSION_ENROLLMENT_REJECTION
}

enum AcademyRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PoseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
