name: Backend CI/CD

# GitHub Secrets 및 Variables 설정 필요:
# - JWT_SECRET (Secret): JWT 토큰 서명용 시크릿 키 (Render 대시보드에서도 설정 가능)
# - DOTENV (Variable): 로컬 .env 파일의 전체 내용 (Firebase Service Account 설정 포함)
#
# 설정 방법:
# 1. GitHub 저장소 Settings > Secrets and variables > Actions
# 2. Variables 탭에서 "New repository variable" 클릭
# 3. Name: DOTENV, Value: 로컬 .env 파일의 전체 내용을 복사해서 붙여넣기
#
# 참고:
# - DATABASE_URL은 Render 대시보드에서 자동으로 설정됩니다.
# - DOTENV 변수는 테스트 실행 시 Firebase Service Account 환경변수를 자동으로 로드합니다.

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
  workflow_dispatch: # 수동 실행 가능

jobs:
  test:
    runs-on: ubuntu-latest

    # 테스트용 환경 변수 설정
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ballet_class_test_db?schema=public
      JWT_SECRET: test-jwt-secret-key-for-testing-only
      NODE_ENV: test
      # Jest Worker ID를 위한 환경변수
      JEST_WORKER_ID: ${{ github.run_id }}
      # 통합 테스트를 위한 추가 환경변수
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ballet_class_test_db

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ballet_class_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Load environment variables from DOTENV
        env:
          DOTENV: ${{ secrets.DOTENV }}
        run: |
          if [ -n "$DOTENV" ]; then
            echo "Loading environment variables from DOTENV..."
            echo "$DOTENV" > .env.test
            echo "✅ .env.test file created"
            
            # DOTENV 변수의 각 줄을 처리
            echo "$DOTENV" | while IFS= read -r line || [ -n "$line" ]; do
              # 주석 및 빈 줄 제거
              line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
              if [ -z "$line" ] || [ "${line#\#}" != "$line" ]; then
                continue
              fi
              
              # KEY=VALUE 형식 파싱 (첫 번째 = 기호만 분리)
              if echo "$line" | grep -q '='; then
                var_name=$(echo "$line" | cut -d '=' -f 1 | xargs)
                var_value=$(echo "$line" | cut -d '=' -f 2- | sed 's/^["'\'']//;s/["'\'']$//' | xargs)
                
                if [ -n "$var_name" ] && [ -n "$var_value" ]; then
                  # Firebase 관련 환경변수만 export (보안을 위해)
                  if echo "$var_name" | grep -qiE "^(TYPE|PROJECT_ID|PRIVATE_KEY|CLIENT_EMAIL|PRIVATE_KEY_ID|CLIENT_ID|AUTH_URI|TOKEN_URI|AUTH_PROVIDER_X509_CERT_URL|CLIENT_X509_CERT_URL|UNIVERSE_DOMAIN|FIREBASE_SERVICE_ACCOUNT_PATH)$"; then
                    # 환경변수 값에 특수문자가 있을 수 있으므로 이스케이프 처리
                    echo "${var_name}=${var_value}" >> $GITHUB_ENV
                    echo "✅ Set $var_name (value hidden)"
                  fi
                fi
              fi
            done
            echo "✅ Environment variables loaded successfully"
          else
            echo "⚠️ DOTENV variable is not set"
          fi

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        run: npx prisma generate

      - name: Wait for database to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          # netcat이 없을 수 있으므로 다른 방법 사용
          while ! timeout 1 bash -c "</dev/tcp/localhost/5432" 2>/dev/null; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

      - name: Run database migrations
        working-directory: ./backend
        run: npx prisma migrate deploy

      - name: Setup test database schema
        working-directory: ./backend
        run: |
          echo "Setting up test database schema..."
          npx prisma db push --force-reset
          echo "Test database schema setup completed!"

      - name: Verify database connection
        working-directory: ./backend
        run: |
          echo "Verifying database connection..."
          npx prisma db execute --stdin <<< "SELECT version();"
          echo "Database connection verified!"

      - name: Create test schemas for parallel testing
        working-directory: ./backend
        run: |
          echo "Creating test schemas for parallel testing..."
          # Jest Worker별 스키마 생성 (최대 4개 worker)
          for i in {1..4}; do
            echo "Creating schema test_worker_$i"
            npx prisma db execute --stdin <<< "CREATE SCHEMA IF NOT EXISTS test_worker_$i;"
          done
          echo "Test schemas created successfully!"

      - name: Run linter
        working-directory: ./backend
        run: npm run lint
        continue-on-error: true

      - name: Run unit tests
        working-directory: ./backend
        run: npm run test
        timeout-minutes: 10

      - name: Run integration tests
        working-directory: ./backend
        run: npm run test:integration
        timeout-minutes: 15

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        run: npx prisma generate

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist/
          retention-days: 7

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run security audit
        working-directory: ./backend
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Generate security report
        working-directory: ./backend
        run: |
          echo "=== Security Audit Report ==="
          npm audit --audit-level=high --json > security-report.json || true
          echo "Security audit completed. Check security-report.json for details."
          echo "Note: Security vulnerabilities found but build continues for development purposes"
          echo "Please review security-report.json and address vulnerabilities in future updates"

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: backend/security-report.json
          retention-days: 30

  deploy-staging:
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'pull_request'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: docker build, kubectl apply, etc.

  deploy-production:
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    env:
      NODE_ENV: production

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist/

      - name: Trigger Render deployment
        run: |
          echo "✅ All tests and builds passed successfully!"
          echo "🚀 Triggering Render deployment..."
          echo "📋 Deployment will be handled by Render's auto-deploy feature"
          echo "🔗 Check deployment status at: https://dashboard.render.com"

      - name: Notify deployment status
        run: |
          echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Integration tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build: SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Render deployment: TRIGGERED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Monitor Render deployment logs" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify application is running correctly" >> $GITHUB_STEP_SUMMARY
          echo "3. Test API endpoints" >> $GITHUB_STEP_SUMMARY
